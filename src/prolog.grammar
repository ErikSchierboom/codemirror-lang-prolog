@top Program { term* }

term { Atom | Variable | number | compoundTerm }

clause { Fact | Rule }

number { Integer | Float | Rational }

compoundTerm { String | List }

List { "[" commaSeparated<term> "]" }

commaSeparated<content> {
  "" | content ("," content?)*
}

// @skip { whitespace }
@skip { whitespace | LineComment }

@tokens {
  @precedence {
    Rational,
    Float,
    Integer
  }

  whitespace { @whitespace+ }

  String { '"' stringContent '"' }
  stringContent { (HexEscapeChar | UnicodeEscapeChar | EscapeChar | RegularChar)* }

  HexEscapeChar { "\\x" hexDigit hexDigit }
  UnicodeEscapeChar { 
    "\\u" hexDigit hexDigit hexDigit hexDigit |
    "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
  }
  EscapeChar { "\\" $[abcefnrsv\\'"`] }
  RegularChar { !["\\] }

  LineComment { "%" ![\n]* }

  Rational { signedInteger ("r" | "/") unsignedInteger }
  Float { signedInteger "." unsignedInteger }
  Integer { binaryInteger | octalInteger | hexInteger | signedInteger }

  binaryInteger { "0b" binaryDigit+ }
  binaryDigit { $[01] }
  octalInteger { "0o" octalDigit+ }
  octalDigit { $[0-7] }
  hexInteger { "0x" hexDigit+ }
  hexDigit { $[0-9a-fA-F] }

  signedInteger { "-"? @digit digitGroup* }
  unsignedInteger { @digit digitGroup* }

  digitGroup { $[_ ]? @digit+ }

  Atom { unquotedAtom | quotedAtom }
  unquotedAtom { @asciiLowercase identifierChar* }
  quotedAtom { "'" ![\']+ "'" }

  Variable { (@asciiUppercase | "_") identifierChar* }

  identifierChar { @asciiLetter | @digit | "_" }
}

@detectDelim

// https://github.com/lezer-parser/generator/blob/d827142436db3724af4b4dd9162132ca343f34e0/src/node.ts#L303
