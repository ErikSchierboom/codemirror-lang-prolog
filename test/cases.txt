# Numbers - Integer

1
-23
1_000_000
1 000 000

==>

Program(Number(Integer), Number(Integer), Number(Integer), Number(Integer))

# Numbers - Binary

0b1
0b101
-0b101
-0b1_01

==>

Program(Number(Binary), Number(Binary), Number(Binary), Number(Binary))

# Numbers - Octal

0o1
0o147
-0o772
-0o6_47

==>

Program(Number(Octal), Number(Octal), Number(Octal), Number(Octal))

# Numbers - Hex

0x1
0xAe0
-0xABcdEF
-0x6_C7

==>

Program(Number(Hex), Number(Hex), Number(Hex), Number(Hex))

# Numbers - Float

7.0
123613.0123
-924.13212
-0.2

==>

Program(Number(Float), Number(Float), Number(Float), Number(Float))

# Numbers - Rational

1/3
-2/4
2r7
-33r34

==>

Program(Number(Rational), Number(Rational), Number(Rational), Number(Rational))

# Strings

""
"a"
"a b c d e"
"\"\a\n\\"
"\u1234\U12345678"
"\x1e"

==>

Program(String, String, String, String, String, String)

# Atoms

age
name123
h_1
lowerAndUpper
'some'
'Upper'
'pre\'tty awesome'

==>

Program(Atom, Atom, Atom, Atom, Atom, Atom, Atom)

# Variables

Name
_Unused
ALLCAPS
Upper_Letter_And_Underscore

==>

Program(Variable, Variable, Variable, Variable)

# Lists

[]
[a]
[[]]
[a,"cool",X]
[a|_]
[a,b,c|_]

==>

Program(List,List(Atom),List(List),List(Atom,String("\""),Variable),List(Atom,Variable),List(Atom,Atom,Atom,Variable))

# Compound term

f()
g(true, [], X)
a(b(c(d)))
'test'(1,2,3)

==>

Program(
  CompoundTerm(Functor(Atom), Arguments),
  CompoundTerm(Functor(Atom), Arguments(Atom, List, Variable)),
  CompoundTerm(Functor(Atom), Arguments(CompoundTerm(Functor(Atom), Arguments(CompoundTerm(Functor(Atom), Arguments(Atom)))))),
  CompoundTerm(Functor(Atom), Arguments(Number(Integer), Number(Integer), Number(Integer))))

# Directives

:- use_module(library(clpfd)).
:- set_prolog_flag(decimals, real).

==>

Program(
  Directive(CompoundTerm(Functor(Atom),Arguments(CompoundTerm(Functor(Atom),Arguments(Atom))))),
  Directive(CompoundTerm(Functor(Atom),Arguments(Atom,Atom))))

# Facts

dutch(erik).
likes(erik, music).

==>

Program(
  Fact(Functor(Atom),Arguments(Atom)),
  Fact(Functor(Atom),Arguments(Atom,Atom)))

# Rules

friends(X, Y) :- likes(X, Z).
friends(X, Y) :- likes(X, Z), likes(Y, Z).
friends(X, Y) :- likes(X, Z) ; likes(Y, Z).

==>

Program(CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),Directive(CompoundTerm(Functor(Atom),Arguments(Variable,Variable))),CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),Directive(CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),CompoundTerm(Functor(Atom),Arguments(Variable,Variable))),Rule(Functor(Atom),Arguments(Variable,Variable),CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),CompoundTerm(Functor(Atom),Arguments(Variable,Variable))))

# Unification

Houses = []
Houses = [1,X,3]
Houses = [_,_,h(_,_,_,milk,_),_,_]
Houses = [h(norwegian,_,_,_,_)|_]

==>

Program(Unification(Variable,List),Unification(Variable,List(Number(Integer),Variable,Number(Integer))),Unification(Variable,List(Variable,Variable,CompoundTerm(Functor(Atom),Arguments(Variable,Variable,Variable,Atom,Variable)),Variable,Variable)),Unification(Variable,List(CompoundTerm(Functor(Atom),Arguments(Atom,Variable,Variable,Variable,Variable)),Variable)))

# Large example

zebra_owner(Owner) :- 
	solve(Houses),
	member(h(Owner,zebra,_,_,_), Houses), !.

water_drinker(Drinker) :-
	solve(Houses),
	member(h(Drinker,_,_,water,_), Houses), !.

solve(Houses) :-
	length(Houses, 5),                                     %  1
	member(h(english,_,_,_,red), Houses),                  %  2
	member(h(spanish,dog,_,_,_), Houses),                  %  3
	member(h(_,_,_,coffee,green), Houses),                 %  4
	member(h(ukrainian,_,_,tea,_), Houses),                %  5
	next(h(_,_,_,_,green), h(_,_,_,_,white), Houses),      %  6
	member(h(_,snake,winston,_,_), Houses),                %  7
	member(h(_,_,kool,_,yellow), Houses),                  %  8
	Houses = [_,_,h(_,_,_,milk,_),_,_],                    %  9
	Houses = [h(norwegian,_,_,_,_)|_],                     % 10
	next(h(_,fox,_,_,_), h(_,_,chesterfield,_,_), Houses), % 11
	next(h(_,_,kool,_,_), h(_,horse,_,_,_), Houses),       % 12
	member(h(_,_,lucky,juice,_), Houses),                  % 13
	member(h(japanese,_,kent,_,_), Houses),                % 14
	next(h(norwegian,_,_,_,_), h(_,_,_,_,blue), Houses).   % 15

next(A, B, Ls) :- append(_, [A,B|_], Ls).
next(A, B, Ls) :- append(_, [B,A|_], Ls).

==>

Program(CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),Directive(CompoundTerm(Functor(Atom),Arguments(Variable,Variable))),CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),Directive(CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),CompoundTerm(Functor(Atom),Arguments(Variable,Variable))),Rule(Functor(Atom),Arguments(Variable,Variable),CompoundTerm(Functor(Atom),Arguments(Variable,Variable)),CompoundTerm(Functor(Atom),Arguments(Variable,Variable))))