@top Program { program }
program { (predicate | term | Keyword)* }

@skip { whitespace | LineComment }

term { compound | literal | Variable | Atom }

// Supported literals are numbers and strings
literal { Number | String }

// All possible kinds of literal numbers in Gleam
Number { Rational | Float | Hex | Octal | Binary | Integer }

@local tokens {  
  stringEnd[@name='"'] { doubleQuote }
  stringEscape { HexChar | UnicodeChar | EscapeChar }
  @else stringContent
}

@skip {} {
  String { doubleQuote (stringContent | stringEscape)* stringEnd }
}

compound { 
  List { leftBracket commaSep<term> rightBracket } |
  CompoundTerm { Functor Arguments ~functor }
}

predicate {
  Directive { colonDash commaSep<term> dot } |
  Rule { Functor Arguments ~functor colonDash sepBy<comma | semicolon, term> dot } |  
  Fact { Functor Arguments ~functor dot }
}

Functor { Atom }
Arguments { parenthesized<commaSep<term>> }

parenthesized<content> { leftParenthesis content rightParenthesis }
commaSep<content> { sepBy<comma, content> }
sepBy<separator, content> { "" | content (separator content)* }

keyword<value> { @specialize<lowerIdentifier, value> }
Keyword {
    keyword<"is">
}

@tokens {
  @precedence {
    Rational Float Hex Octal Binary Integer
    Variable Atom
    lowerIdentifier
    leftBracket rightBracket leftParenthesis rightParenthesis comma doubleQuote percentage dot semicolon colonDash
    whitespace
    LineComment
  }

  whitespace { @whitespace+ }

  leftBracket { "[" }
  rightBracket { "]" }
  leftParenthesis { "(" }
  rightParenthesis { ")" }
  comma { "," }
  doubleQuote { '"' }
  percentage { "%" }
  dot { "." }
  semicolon { ";" }
  colonDash { ":-" }

  lowerIdentifier { @asciiLowercase+ }

  Atom {
    @asciiLowercase wordChar* |
    "'" ("\\'" | ![\\'])+ "'"
  }
  Variable { (@asciiUppercase | "_") wordChar* }
  wordChar { @asciiLetter | @digit | "_" }

  HexChar { "\\x" hexDigit hexDigit }
  UnicodeChar { 
    "\\u" hexDigit hexDigit hexDigit hexDigit |
    "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
  }
  EscapeChar { "\\" $[abcefnrsv\\'"`] }

  // Numbers
  Rational { signed<digits<@digit>> $[r/] digits<@digit> }
  Float { signed<@digit>+ "." @digit+ }
  Hex { prefixed<"0x", hexDigit> }
  Octal { prefixed<"0o", octalDigit> }
  Binary { prefixed<"0b", binaryDigit> }
  Integer { signed<digits<@digit>> }
  hexDigit { $[0-9a-fA-F] }
  octalDigit { $[0-7] }
  binaryDigit { $[01] }
  digits<digit> { digit ($[\_ ]? digit)* }
  signed<digit> { "-"? digit}
  prefixed<prefix, digit> { signed<prefix digits<digit>> }

  LineComment { percentage ![\n]* }
}