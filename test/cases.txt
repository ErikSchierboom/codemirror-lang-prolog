# Numbers - Integer

1
-23
1_000_000
1 000 000

==>

Program(Number(Integer), Number(Integer), Number(Integer), Number(Integer))

# Numbers - Binary

0b1
0b101
-0b101
-0b1_01

==>

Program(Number(Binary), Number(Binary), Number(Binary), Number(Binary))

# Numbers - Octal

0o1
0o147
-0o772
-0o6_47

==>

Program(Number(Octal), Number(Octal), Number(Octal), Number(Octal))

# Numbers - Hex

0x1
0xAe0
-0xABcdEF
-0x6_C7

==>

Program(Number(Hex), Number(Hex), Number(Hex), Number(Hex))

# Numbers - Float

7.0
123613.0123
-924.13212
-0.2

==>

Program(Number(Float), Number(Float), Number(Float), Number(Float))

# Numbers - Rational

1/3
-2/4
2r7
-33r34

==>

Program(Number(Rational), Number(Rational), Number(Rational), Number(Rational))

# Strings

""
"a"
"a b c d e"
"\"\a\n\\"
"\u1234\U12345678"
"\x1e"

==>

Program(String, String, String, String, String, String)

# Atoms

age
name123
h_1
lowerAndUpper
'some'
'Upper'
'pre\'tty awesome'

==>

Program(Atom, Atom, Atom, Atom, Atom, Atom, Atom)

# Variables

Name
_Unused
ALLCAPS
Upper_Letter_And_Underscore

==>

Program(Variable, Variable, Variable, Variable)

# Lists

[]
[a]
[[]]
[a, "cool", X]

==>

Program(List, List(Atom), List(List), List(Atom, String, Variable))

# Compound term

f()
g(true, [], X)
a(b(c(d)))
'test'(1,2,3)

==>

Program(
  CompoundTerm(Functor(Atom), Arguments),
  CompoundTerm(Functor(Atom), Arguments(Atom, List, Variable)),
  CompoundTerm(Functor(Atom), Arguments(CompoundTerm(Functor(Atom), Arguments(CompoundTerm(Functor(Atom), Arguments(Atom)))))),
  CompoundTerm(Functor(Atom), Arguments(Number(Integer), Number(Integer), Number(Integer))))

# Directive

:- use_module(library(clpfd)).
:- set_prolog_flag(decimals, real).

==>

Program(
  Directive(CompoundTerm(Functor(Atom),Arguments(CompoundTerm(Functor(Atom),Arguments(Atom))))),
  Directive(CompoundTerm(Functor(Atom),Arguments(Atom,Atom))))
